[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.jaxrs.QuoteResource: java.util.List getQuotes(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.jaxrs.QuoteResource::MockObject]	<com.ibm.websphere.samples.daytrader.jaxrs.QuoteResource: java.util.List quotesGet(java.lang.String)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.jaxrs.QuoteResource: java.util.List getQuotes(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.jaxrs.QuoteResource::MockObject]	<com.ibm.websphere.samples.daytrader.jaxrs.QuoteResource: java.util.List quotesPost(java.lang.String)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String getPage(int)>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet: void doConfigDisplay(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String getPage(int)>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet: void doResetTrade(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: char getScenarioAction(boolean)>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet: void performTask(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.math.BigDecimal getOrderFee(java.lang.String)>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean createOrder(com.ibm.websphere.samples.daytrader.entities.AccountDataBean,com.ibm.websphere.samples.daytrader.entities.QuoteDataBean,com.ibm.websphere.samples.daytrader.entities.HoldingDataBean,java.lang.String,double)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndEmail(java.lang.String)>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet: void performTask(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndEmail(java.lang.String)>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean getRandomInstance()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int rndInt(int)>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: char getScenarioAction(boolean)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int rndInt(int)>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndEmail(java.lang.String)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int rndInt(int)>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: com.ibm.websphere.samples.daytrader.entities.AccountDataBean getRandomInstance()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int rndInt(int)>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndAddress()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int rndInt(int)>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndCreditCard()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int rndInt(int)>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndFullName()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int rndInt(int)>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: float rndQuantity()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int rndInt(int)>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndSymbol()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int rndInt(int)>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndSymbols()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int rndInt(int)>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.HoldingDataBean: com.ibm.websphere.samples.daytrader.entities.HoldingDataBean getRandomInstance()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int rndInt(int)>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean getRandomInstance()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: float rndFloat(int)>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.math.BigDecimal getRandomPriceChangeFactor()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: float rndFloat(int)>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean getRandomInstance()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.math.BigDecimal rndBigDecimal(float)>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: com.ibm.websphere.samples.daytrader.entities.AccountDataBean getRandomInstance()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.math.BigDecimal rndBigDecimal(float)>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.HoldingDataBean: com.ibm.websphere.samples.daytrader.entities.HoldingDataBean getRandomInstance()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.math.BigDecimal rndBigDecimal(float)>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean getRandomInstance()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.math.BigDecimal rndBigDecimal(float)>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean getRandomInstance()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.math.BigDecimal rndBigDecimal(float)>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean getRandomInstance()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.websocket.JsonEncoder: java.lang.String encode(com.ibm.websphere.samples.daytrader.web.websocket.JsonMessage)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.websocket.JsonEncoder::MockObject]	<com.ibm.websphere.samples.daytrader.web.websocket.JsonEncoder: java.lang.String encode(java.lang.Object)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.prims.beanval.CDIMethodConstraintBean: int getHitCount(java.time.LocalDateTime)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.beanval.CDIMethodConstraintBean::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.beanval.PingServletBeanValCDI: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean buy(java.lang.String,java.lang.String,double,int)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean buy(java.lang.String,java.lang.String,double,int)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean sell(java.lang.String,java.lang.Integer,int)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean sell(java.lang.String,java.lang.Integer,int)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean completeOrder(java.lang.Integer,boolean)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean buy(java.lang.String,java.lang.String,double,int)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean completeOrder(java.lang.Integer,boolean)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean sell(java.lang.String,java.lang.Integer,int)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean completeOrder(java.lang.Integer,boolean)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean completeOrder(java.lang.Integer,boolean)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: java.util.concurrent.Future completeOrderAsync(java.lang.Integer,boolean)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean buy(java.lang.String,java.lang.String,double,int)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: java.util.concurrent.Future completeOrderAsync(java.lang.Integer,boolean)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean sell(java.lang.String,java.lang.Integer,int)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: java.util.Collection getOrders(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2CMROne2Many: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: java.util.Collection getOrders(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: java.util.Collection getOrders(java.lang.String)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: java.util.Collection getClosedOrders(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: java.util.Collection getClosedOrders(java.lang.String)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean createQuote(java.lang.String,java.lang.String,java.math.BigDecimal)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean createQuote(java.lang.String,java.lang.String,java.math.BigDecimal)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean getQuote(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.PingJDBCRead: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean getQuote(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2Entity2JSP: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean getQuote(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean getQuote(java.lang.String)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean getQuote(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.PingJDBCRead2JSP: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean getQuote(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2Entity: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean updateQuotePriceVolume(java.lang.String,java.math.BigDecimal,double)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean completeOrder(java.lang.Integer,boolean)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean updateQuotePriceVolume(java.lang.String,java.math.BigDecimal,double)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean updateQuotePriceVolume(java.lang.String,java.math.BigDecimal,double)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: java.util.Collection getHoldings(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: java.util.Collection getHoldings(java.lang.String)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: java.util.Collection getHoldings(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2EntityCollection: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.HoldingDataBean getHolding(java.lang.Integer)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.HoldingDataBean getHolding(java.lang.Integer)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountDataBean getAccountData(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountDataBean getAccountData(java.lang.String)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean getAccountProfileData(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2CMROne2One: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean getAccountProfileData(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean getAccountProfileData(java.lang.String)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean updateAccountProfile(com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean updateAccountProfile(com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountDataBean login(java.lang.String,java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountDataBean login(java.lang.String,java.lang.String)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountDataBean register(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.math.BigDecimal)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountDataBean register(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.math.BigDecimal)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean createOrder(com.ibm.websphere.samples.daytrader.entities.AccountDataBean,com.ibm.websphere.samples.daytrader.entities.QuoteDataBean,com.ibm.websphere.samples.daytrader.entities.HoldingDataBean,java.lang.String,double)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean buy(java.lang.String,java.lang.String,double,int)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean createOrder(com.ibm.websphere.samples.daytrader.entities.AccountDataBean,com.ibm.websphere.samples.daytrader.entities.QuoteDataBean,com.ibm.websphere.samples.daytrader.entities.HoldingDataBean,java.lang.String,double)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean sell(java.lang.String,java.lang.Integer,int)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean createOrder(com.ibm.websphere.samples.daytrader.entities.AccountDataBean,com.ibm.websphere.samples.daytrader.entities.QuoteDataBean,com.ibm.websphere.samples.daytrader.entities.HoldingDataBean,java.lang.String,double)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean createOrder(com.ibm.websphere.samples.daytrader.entities.AccountDataBean,com.ibm.websphere.samples.daytrader.entities.QuoteDataBean,com.ibm.websphere.samples.daytrader.entities.HoldingDataBean,java.lang.String,double)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.HoldingDataBean createHolding(com.ibm.websphere.samples.daytrader.entities.AccountDataBean,com.ibm.websphere.samples.daytrader.entities.QuoteDataBean,double,java.math.BigDecimal)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean completeOrder(java.lang.Integer,boolean)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: double investmentReturn(double,double)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean pingTwoPhase(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2TwoPhase: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean createOrder(com.ibm.websphere.samples.daytrader.entities.AccountDataBean,com.ibm.websphere.samples.daytrader.entities.QuoteDataBean,com.ibm.websphere.samples.daytrader.entities.HoldingDataBean,java.lang.String,double)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean createOrder(com.ibm.websphere.samples.daytrader.entities.AccountDataBean,com.ibm.websphere.samples.daytrader.entities.QuoteDataBean,com.ibm.websphere.samples.daytrader.entities.HoldingDataBean,java.lang.String,double)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean buy(java.lang.String,java.lang.String,double,int)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean buy(java.lang.String,java.lang.String,double,int)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean sell(java.lang.String,java.lang.Integer,int)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean sell(java.lang.String,java.lang.Integer,int)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.websocket.QuotePriceChangeListEncoder: java.lang.String encode(java.util.concurrent.CopyOnWriteArrayList)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.websocket.QuotePriceChangeListEncoder::MockObject]	<com.ibm.websphere.samples.daytrader.web.websocket.QuotePriceChangeListEncoder: java.lang.String encode(java.lang.Object)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean completeOrder(java.lang.Integer,boolean)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean completeOrder(java.lang.Integer,boolean)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: java.util.concurrent.Future completeOrderAsync(java.lang.Integer,boolean)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean buy(java.lang.String,java.lang.String,double,int)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: java.util.concurrent.Future completeOrderAsync(java.lang.Integer,boolean)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean sell(java.lang.String,java.lang.Integer,int)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: java.util.Collection getOrders(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2CMROne2Many: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: java.util.Collection getOrders(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: java.util.Collection getOrders(java.lang.String)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: java.util.Collection getClosedOrders(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: java.util.Collection getClosedOrders(java.lang.String)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean createQuote(java.lang.String,java.lang.String,java.math.BigDecimal)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean createQuote(java.lang.String,java.lang.String,java.math.BigDecimal)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean getQuote(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.PingJDBCRead: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean getQuote(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2Entity2JSP: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean getQuote(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean getQuote(java.lang.String)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean getQuote(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.PingJDBCRead2JSP: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean getQuote(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2Entity: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean updateQuotePriceVolume(java.lang.String,java.math.BigDecimal,double)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean updateQuotePriceVolume(java.lang.String,java.math.BigDecimal,double)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: java.util.Collection getHoldings(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: java.util.Collection getHoldings(java.lang.String)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: java.util.Collection getHoldings(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2EntityCollection: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.HoldingDataBean getHolding(java.lang.Integer)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.HoldingDataBean getHolding(java.lang.Integer)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountDataBean getAccountData(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountDataBean getAccountData(java.lang.String)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean getAccountProfileData(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2CMROne2One: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean getAccountProfileData(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean getAccountProfileData(java.lang.String)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean updateAccountProfile(com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean updateAccountProfile(com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountDataBean login(java.lang.String,java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountDataBean login(java.lang.String,java.lang.String)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountDataBean register(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.math.BigDecimal)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountDataBean register(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.math.BigDecimal)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.websocket.JsonDecoder: com.ibm.websphere.samples.daytrader.web.websocket.JsonMessage decode(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.websocket.JsonDecoder::MockObject]	<com.ibm.websphere.samples.daytrader.web.websocket.JsonDecoder: java.lang.Object decode(java.lang.String)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.websocket.ActionDecoder: com.ibm.websphere.samples.daytrader.web.websocket.ActionMessage decode(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.websocket.ActionDecoder::MockObject]	<com.ibm.websphere.samples.daytrader.web.websocket.ActionDecoder: java.lang.Object decode(java.lang.String)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.FinancialUtils: java.math.BigDecimal computeGainPercent(java.math.BigDecimal,java.math.BigDecimal)>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: void <init>(java.math.BigDecimal,java.math.BigDecimal,double,java.util.Collection,java.util.Collection)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.FinancialUtils: java.math.BigDecimal computeGainPercent(java.math.BigDecimal,java.math.BigDecimal)>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.jsf.PortfolioJSF: void getPortfolio()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.FinancialUtils: java.math.BigDecimal computeGainPercent(java.math.BigDecimal,java.math.BigDecimal)>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.math.BigDecimal getGainPercent()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean getMarketSummary()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean getMarketSummary()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: java.util.Collection getAllQuotes()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: java.util.Collection getAllQuotes()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.prims.cdi.PingCDIBean: int getBeanMangerViaJNDI()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.cdi.PingCDIBean::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.cdi.PingServletCDIBeanManagerViaJNDI: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.prims.cdi.PingCDIBean: int getBeanMangerViaCDICurrent()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.cdi.PingCDIBean::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.cdi.PingServletCDIBeanManagerViaCDICurrent: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.direct.TradeDirect: java.sql.Connection getConnPublic()>	[<<immutable-context>>, <com.ibm.websphere.samples.daytrader.web.prims.PingServlet2DB: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>/new com.ibm.websphere.samples.daytrader.impl.direct.TradeDirect/0]	<com.ibm.websphere.samples.daytrader.web.prims.PingServlet2DB: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.prims.beanval.CDIMethodConstraintBean: java.util.List hitList()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.beanval.CDIMethodConstraintBean::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.beanval.PingServletBeanValCDI: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: java.lang.String toString()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: void print()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: java.lang.Integer getAccountID()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: void login(java.lang.String)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: java.lang.Integer getAccountID()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: java.lang.Integer getAccountID()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: java.lang.String toHTML()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: int getLoginCount()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: void login(java.lang.String)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: int getLoginCount()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: int getLoginCount()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: java.lang.String toHTML()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: int getLogoutCount()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: int getLogoutCount()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: java.lang.String toHTML()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: int getLogoutCount()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: void logout()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: java.util.Date getLastLogin()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: java.util.Date getLastLogin()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: java.lang.String toHTML()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: java.util.Date getCreationDate()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: java.util.Date getCreationDate()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: java.lang.String toHTML()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: java.math.BigDecimal getBalance()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: java.math.BigDecimal getBalance()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: java.lang.String toHTML()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: java.math.BigDecimal getOpenBalance()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: java.math.BigDecimal getOpenBalance()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: java.lang.String toHTML()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: java.lang.String getProfileID()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: java.lang.String getProfileID()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: java.lang.String toHTML()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean getProfile()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: void login(java.lang.String)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String getHostname()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndNewUserID()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String[] getRunTimeModeNames()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.jaxrs.QuoteResource: void <init>(javax.enterprise.inject.Instance)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String[] getRunTimeModeNames()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.servlet.TestServlet: void <init>(javax.enterprise.inject.Instance)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String[] getRunTimeModeNames()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.jsf.TradeAppJSF: void <init>(javax.enterprise.inject.Instance)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String[] getRunTimeModeNames()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.jsf.OrderDataJSF: void <init>(javax.enterprise.inject.Instance)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String[] getRunTimeModeNames()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.websocket.MarketSummaryWebSocket: void <init>(javax.enterprise.inject.Instance)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String[] getRunTimeModeNames()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet: void doConfigUpdate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String[] getRunTimeModeNames()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.ejb3.AsyncScheduledOrder: void <init>(javax.enterprise.inject.Instance)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String[] getRunTimeModeNames()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeWebContextListener: void contextInitialized(javax.servlet.ServletContextEvent)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String[] getRunTimeModeNames()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.jsf.QuoteJSF: void <init>(javax.enterprise.inject.Instance)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String[] getRunTimeModeNames()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.jsf.AccountDataJSF: void <init>(javax.enterprise.inject.Instance)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String[] getRunTimeModeNames()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeServletAction: void <init>(javax.enterprise.inject.Instance)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String[] getRunTimeModeNames()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.jsf.MarketSummaryJSF: void <init>(javax.enterprise.inject.Instance)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String[] getRunTimeModeNames()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.jsf.PortfolioJSF: void <init>(javax.enterprise.inject.Instance)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String[] getRunTimeModeNames()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.servlet.OrdersAlertFilter: void <init>(javax.enterprise.inject.Instance)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String[] getRunTimeModeNames()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.mdb.DTBroker3MDB: void boostrapTradeServices()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String getUserID()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet: void performTask(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String nextUserID()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String getUserID()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: double random()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int rndInt(int)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: double random()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: float rndFloat(int)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: double random()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.math.BigDecimal rndBigDecimal(float)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: double random()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.math.BigDecimal getRandomPriceChangeFactor()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndAddress()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet: void performTask(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndAddress()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean getRandomInstance()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndBalance()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet: void performTask(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndCreditCard()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet: void performTask(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndCreditCard()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean getRandomInstance()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndFullName()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet: void performTask(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndFullName()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean getRandomInstance()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: boolean rndBoolean()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean getRandomInstance()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndNewUserID()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet: void performTask(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.math.BigDecimal getRandomPriceChangeFactor()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean completeOrder(java.lang.Integer,boolean)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.math.BigDecimal getRandomPriceChangeFactor()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.prims.PingJDBCWrite: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: float rndQuantity()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet: void performTask(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: float rndQuantity()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.HoldingDataBean: com.ibm.websphere.samples.daytrader.entities.HoldingDataBean getRandomInstance()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: float rndQuantity()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean getRandomInstance()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: float rndQuantity()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean getRandomInstance()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndSymbol()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.prims.PingJDBCRead: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndSymbol()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2Entity2JSP: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndSymbol()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Entity: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndSymbol()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.prims.PingJDBCWrite: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndSymbol()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.prims.PingJDBCRead2JSP: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndSymbol()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet: void performTask(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndSymbol()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2Entity: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndSymbol()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2TwoPhase: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndSymbol()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.HoldingDataBean: com.ibm.websphere.samples.daytrader.entities.HoldingDataBean getRandomInstance()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndSymbol()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean getRandomInstance()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndSymbol()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean getRandomInstance()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndSymbols()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet: void performTask(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndUserID()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2CMROne2Many: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndUserID()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2CMROne2One: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndUserID()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2EntityCollection: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndUserID()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: com.ibm.websphere.samples.daytrader.entities.AccountDataBean getRandomInstance()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndUserID()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String getUserID()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndUserID()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean getRandomInstance()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.HoldingDataBean: java.lang.String toString()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.HoldingDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.HoldingDataBean: void print()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String getNextUserIDFromDeck()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndUserID()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.HoldingDataBean: java.lang.Integer getHoldingID()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.HoldingDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.HoldingDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.HoldingDataBean: java.lang.Integer getHoldingID()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.HoldingDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.HoldingDataBean: java.lang.String toHTML()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.HoldingDataBean: double getQuantity()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.HoldingDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.HoldingDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.HoldingDataBean: double getQuantity()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.HoldingDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.HoldingDataBean: java.lang.String toHTML()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.HoldingDataBean: java.math.BigDecimal getPurchasePrice()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.HoldingDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.HoldingDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.HoldingDataBean: java.math.BigDecimal getPurchasePrice()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.HoldingDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.HoldingDataBean: java.lang.String toHTML()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.HoldingDataBean: java.util.Date getPurchaseDate()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.HoldingDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.HoldingDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.HoldingDataBean: java.util.Date getPurchaseDate()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.HoldingDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.HoldingDataBean: java.lang.String toHTML()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.HoldingDataBean: java.lang.String getQuoteID()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.HoldingDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.HoldingDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.HoldingDataBean: java.lang.String getQuoteID()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.HoldingDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.HoldingDataBean: java.lang.String toHTML()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String[] getOrderProcessingModeNames()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet: void doConfigUpdate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String[] getOrderProcessingModeNames()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeWebContextListener: void contextInitialized(javax.servlet.ServletContextEvent)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String[] getWebInterfaceNames()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet: void doConfigUpdate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getMAX_USERS()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet: void doConfigUpdate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getMAX_USERS()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet: void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getMAX_USERS()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String getNextUserIDFromDeck()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getMAX_QUOTES()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet: void doConfigUpdate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: boolean getUpdateQuotePrices()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean updateQuotePriceVolume(java.lang.String,java.math.BigDecimal,double)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getPrimIterations()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.prims.PingJDBCRead: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getPrimIterations()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2CMROne2Many: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getPrimIterations()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2CMROne2One: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getPrimIterations()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2Entity2JSP: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getPrimIterations()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Entity: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getPrimIterations()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet: void doConfigUpdate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getPrimIterations()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.prims.PingServlet2Include: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getPrimIterations()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.prims.PingJDBCWrite: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getPrimIterations()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2EntityCollection: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getPrimIterations()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2MDBTopic: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getPrimIterations()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getPrimIterations()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.prims.PingJDBCRead2JSP: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getPrimIterations()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2MDBQueue: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getPrimIterations()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2Entity: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getPrimIterations()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2TwoPhase: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: boolean getLongRun()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: java.util.Collection getClosedOrders(java.lang.String)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: boolean getLongRun()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet: void doConfigUpdate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: boolean getLongRun()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.jsf.AccountDataJSF: void home()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: boolean getPublishQuotePriceChange()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean updateQuotePriceVolume(java.lang.String,java.math.BigDecimal,double)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: boolean getPublishQuotePriceChange()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: void publishQuotePriceChange(com.ibm.websphere.samples.daytrader.entities.QuoteDataBean,java.math.BigDecimal,java.math.BigDecimal,double)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: boolean getPublishQuotePriceChange()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet: void doConfigUpdate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getMarketSummaryInterval()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet: void doConfigUpdate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getRunTimeMode()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.jaxrs.QuoteResource: void <init>(javax.enterprise.inject.Instance)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getRunTimeMode()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.servlet.TestServlet: void <init>(javax.enterprise.inject.Instance)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getRunTimeMode()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.jsf.TradeAppJSF: void <init>(javax.enterprise.inject.Instance)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getRunTimeMode()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.jsf.OrderDataJSF: void <init>(javax.enterprise.inject.Instance)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getRunTimeMode()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.websocket.MarketSummaryWebSocket: void <init>(javax.enterprise.inject.Instance)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getRunTimeMode()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet: void doConfigUpdate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getRunTimeMode()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.ejb3.AsyncScheduledOrder: void <init>(javax.enterprise.inject.Instance)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getRunTimeMode()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeWebContextListener: void contextInitialized(javax.servlet.ServletContextEvent)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getRunTimeMode()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.jsf.QuoteJSF: void <init>(javax.enterprise.inject.Instance)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getRunTimeMode()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.jsf.AccountDataJSF: void <init>(javax.enterprise.inject.Instance)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getRunTimeMode()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeServletAction: void <init>(javax.enterprise.inject.Instance)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getRunTimeMode()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.jsf.MarketSummaryJSF: void <init>(javax.enterprise.inject.Instance)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getRunTimeMode()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.jsf.PortfolioJSF: void <init>(javax.enterprise.inject.Instance)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getRunTimeMode()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.servlet.OrdersAlertFilter: void <init>(javax.enterprise.inject.Instance)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getRunTimeMode()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.mdb.DTBroker3MDB: void boostrapTradeServices()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getOrderProcessingMode()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet: void doConfigUpdate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getOrderProcessingMode()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeWebContextListener: void contextInitialized(javax.servlet.ServletContextEvent)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getWebInterface()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeAppServlet: void performTask(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getWebInterface()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet: void doConfigUpdate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: boolean getDisplayOrderAlerts()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet: void doConfigUpdate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: boolean getDisplayOrderAlerts()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.servlet.OrdersAlertFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: boolean getDisplayOrderAlerts()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.jsf.AccountDataJSF: void home()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getListQuotePriceChangeFrequency()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet: void doConfigUpdate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean getMarketSummary()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean getMarketSummary()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.String toString()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.OrderDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: void print()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.Integer getOrderID()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.OrderDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.Integer getOrderID()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.OrderDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.String toHTML()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.Integer getOrderID()>	[com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject, <com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean createOrder(com.ibm.websphere.samples.daytrader.entities.AccountDataBean,com.ibm.websphere.samples.daytrader.entities.QuoteDataBean,com.ibm.websphere.samples.daytrader.entities.HoldingDataBean,java.lang.String,double)>/new com.ibm.websphere.samples.daytrader.entities.OrderDataBean/0]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean buy(java.lang.String,java.lang.String,double,int)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.Integer getOrderID()>	[com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject, <com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean createOrder(com.ibm.websphere.samples.daytrader.entities.AccountDataBean,com.ibm.websphere.samples.daytrader.entities.QuoteDataBean,com.ibm.websphere.samples.daytrader.entities.HoldingDataBean,java.lang.String,double)>/new com.ibm.websphere.samples.daytrader.entities.OrderDataBean/0]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean sell(java.lang.String,java.lang.Integer,int)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.Integer getOrderID()>	[com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject, <com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean createOrder(com.ibm.websphere.samples.daytrader.entities.AccountDataBean,com.ibm.websphere.samples.daytrader.entities.QuoteDataBean,com.ibm.websphere.samples.daytrader.entities.HoldingDataBean,java.lang.String,double)>/new com.ibm.websphere.samples.daytrader.entities.OrderDataBean/0]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean buy(java.lang.String,java.lang.String,double,int)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.Integer getOrderID()>	[com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject, <com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean createOrder(com.ibm.websphere.samples.daytrader.entities.AccountDataBean,com.ibm.websphere.samples.daytrader.entities.QuoteDataBean,com.ibm.websphere.samples.daytrader.entities.HoldingDataBean,java.lang.String,double)>/new com.ibm.websphere.samples.daytrader.entities.OrderDataBean/0]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean sell(java.lang.String,java.lang.Integer,int)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.Integer getOrderID()>	[com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject, <com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean sell(java.lang.String,java.lang.Integer,int)>/new com.ibm.websphere.samples.daytrader.entities.OrderDataBean/0]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean sell(java.lang.String,java.lang.Integer,int)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.String getOrderType()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.OrderDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.String getOrderType()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.OrderDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.String toHTML()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.String getOrderType()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.OrderDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: boolean isBuy()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.String getOrderType()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.OrderDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: boolean isSell()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.String getOrderStatus()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.OrderDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.String getOrderStatus()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.OrderDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.String toHTML()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.String getOrderStatus()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.OrderDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: boolean isOpen()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.String getOrderStatus()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.OrderDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: boolean isCompleted()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.String getOrderStatus()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.OrderDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: boolean isCancelled()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.util.Date getOpenDate()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.OrderDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.util.Date getOpenDate()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.OrderDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.String toHTML()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.util.Date getCompletionDate()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.OrderDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.util.Date getCompletionDate()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.OrderDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.String toHTML()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: double getQuantity()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.OrderDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: double getQuantity()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.OrderDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.String toHTML()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.math.BigDecimal getPrice()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.OrderDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.math.BigDecimal getPrice()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.OrderDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.String toHTML()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.math.BigDecimal getOrderFee()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.OrderDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.math.BigDecimal getOrderFee()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.OrderDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.String toHTML()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.math.BigDecimal getOrderFee()>	[com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject, <com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean createOrder(com.ibm.websphere.samples.daytrader.entities.AccountDataBean,com.ibm.websphere.samples.daytrader.entities.QuoteDataBean,com.ibm.websphere.samples.daytrader.entities.HoldingDataBean,java.lang.String,double)>/new com.ibm.websphere.samples.daytrader.entities.OrderDataBean/0]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean buy(java.lang.String,java.lang.String,double,int)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.math.BigDecimal getOrderFee()>	[com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject, <com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean createOrder(com.ibm.websphere.samples.daytrader.entities.AccountDataBean,com.ibm.websphere.samples.daytrader.entities.QuoteDataBean,com.ibm.websphere.samples.daytrader.entities.HoldingDataBean,java.lang.String,double)>/new com.ibm.websphere.samples.daytrader.entities.OrderDataBean/0]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean sell(java.lang.String,java.lang.Integer,int)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.String getSymbol()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.OrderDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.String getSymbol()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.OrderDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.String toHTML()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: java.util.Collection getAllQuotes()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: java.util.Collection getAllQuotes()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.MDBStats: com.ibm.websphere.samples.daytrader.util.MDBStats getInstance()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.mdb.DTBroker3MDB: void <init>()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String toString()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: void print()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String getUserID()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: void login(java.lang.String)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String getUserID()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean updateAccountProfile(com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String getUserID()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String getUserID()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String toHTML()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String getPassword()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: void login(java.lang.String)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String getPassword()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean updateAccountProfile(com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String getPassword()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String getPassword()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String toHTML()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String getFullName()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean updateAccountProfile(com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String getFullName()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String getFullName()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String toHTML()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String getAddress()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean updateAccountProfile(com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String getAddress()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String getAddress()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String toHTML()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String getEmail()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean updateAccountProfile(com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String getEmail()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String getEmail()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String toHTML()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String getCreditCard()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean updateAccountProfile(com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String getCreditCard()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String getCreditCard()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String toHTML()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean getRandomInstance()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean getRandomInstance()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.lang.String toString()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.QuoteDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: void print()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.lang.String getSymbol()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.QuoteDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: void publishQuotePriceChange(com.ibm.websphere.samples.daytrader.entities.QuoteDataBean,java.math.BigDecimal,java.math.BigDecimal,double)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.lang.String getSymbol()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.QuoteDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.HoldingDataBean: java.lang.String getQuoteID()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.lang.String getSymbol()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.QuoteDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.String getSymbol()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.lang.String getSymbol()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.QuoteDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.lang.String getSymbol()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.QuoteDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.lang.String toHTML()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.lang.String getCompanyName()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.QuoteDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: void publishQuotePriceChange(com.ibm.websphere.samples.daytrader.entities.QuoteDataBean,java.math.BigDecimal,java.math.BigDecimal,double)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.lang.String getCompanyName()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.QuoteDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.lang.String getCompanyName()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.QuoteDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.lang.String toHTML()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.math.BigDecimal getPrice()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.QuoteDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: void publishQuotePriceChange(com.ibm.websphere.samples.daytrader.entities.QuoteDataBean,java.math.BigDecimal,java.math.BigDecimal,double)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.math.BigDecimal getPrice()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.QuoteDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean createOrder(com.ibm.websphere.samples.daytrader.entities.AccountDataBean,com.ibm.websphere.samples.daytrader.entities.QuoteDataBean,com.ibm.websphere.samples.daytrader.entities.HoldingDataBean,java.lang.String,double)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.math.BigDecimal getPrice()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.QuoteDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.math.BigDecimal getPrice()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.QuoteDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.lang.String toHTML()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.math.BigDecimal getOpen()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.QuoteDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: void publishQuotePriceChange(com.ibm.websphere.samples.daytrader.entities.QuoteDataBean,java.math.BigDecimal,java.math.BigDecimal,double)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.math.BigDecimal getOpen()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.QuoteDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.math.BigDecimal getOpen()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.QuoteDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.lang.String toHTML()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.math.BigDecimal getLow()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.QuoteDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: void publishQuotePriceChange(com.ibm.websphere.samples.daytrader.entities.QuoteDataBean,java.math.BigDecimal,java.math.BigDecimal,double)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.math.BigDecimal getLow()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.QuoteDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.math.BigDecimal getLow()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.QuoteDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.lang.String toHTML()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.math.BigDecimal getHigh()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.QuoteDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: void publishQuotePriceChange(com.ibm.websphere.samples.daytrader.entities.QuoteDataBean,java.math.BigDecimal,java.math.BigDecimal,double)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.math.BigDecimal getHigh()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.QuoteDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.math.BigDecimal getHigh()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.QuoteDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.lang.String toHTML()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: double getChange()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.QuoteDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: double getChange()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.QuoteDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.lang.String toHTML()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: double getVolume()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.QuoteDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: void publishQuotePriceChange(com.ibm.websphere.samples.daytrader.entities.QuoteDataBean,java.math.BigDecimal,java.math.BigDecimal,double)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: double getVolume()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.QuoteDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: double getVolume()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.QuoteDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.lang.String toHTML()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.jsf.QuoteJSF: java.lang.String getQuotesBySymbols()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.jsf.QuoteJSF::MockObject]	<com.ibm.websphere.samples.daytrader.web.jsf.QuoteJSF: void getAllQuotes()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean: int getTradeUserCount()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean: int getNewUserCount()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean: int getSumLoginCount()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean: int getSumLogoutCount()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean: int getHoldingCount()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean: int getBuyOrderCount()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean: int getSellOrderCount()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean: int getCancelledOrderCount()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean: int getOpenOrderCount()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean: int getDeletedOrderCount()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean: int getOrderCount()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.prims.cdi.PingCDIBean: int hello()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.cdi.PingCDIBean::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.cdi.PingServletCDI: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.websocket.JsonMessage: java.lang.String getKey()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.websocket.JsonMessage::MockObject]	<com.ibm.websphere.samples.daytrader.web.websocket.JsonEncoder: java.lang.String encode(com.ibm.websphere.samples.daytrader.web.websocket.JsonMessage)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.websocket.JsonMessage: java.lang.String getValue()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.websocket.JsonMessage::MockObject]	<com.ibm.websphere.samples.daytrader.web.websocket.JsonEncoder: java.lang.String encode(com.ibm.websphere.samples.daytrader.web.websocket.JsonMessage)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.util.Log: boolean doTrace()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.web.servlet.OrdersAlertFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean getRandomInstance()>	[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.impl.direct.TradeDirect: void <clinit>()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.lang.String toString()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: void print()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.math.BigDecimal getGainPercent()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.math.BigDecimal getTSIA()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: void <init>(java.math.BigDecimal,java.math.BigDecimal,double,java.util.Collection,java.util.Collection)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.math.BigDecimal getTSIA()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.math.BigDecimal getTSIA()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.lang.String toHTML()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.math.BigDecimal getTSIA()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.math.BigDecimal getGainPercent()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.math.BigDecimal getOpenTSIA()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: void <init>(java.math.BigDecimal,java.math.BigDecimal,double,java.util.Collection,java.util.Collection)>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.math.BigDecimal getOpenTSIA()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.math.BigDecimal getOpenTSIA()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.lang.String toHTML()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.math.BigDecimal getOpenTSIA()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.math.BigDecimal getGainPercent()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: double getVolume()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: double getVolume()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.lang.String toHTML()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.util.Collection getTopGainers()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.util.Collection getTopGainers()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.lang.String toHTML()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.util.Collection getTopLosers()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.util.Collection getTopLosers()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.lang.String toHTML()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.util.Date getSummaryDate()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.lang.String toString()>
[<<immutable-context>>, <<immutable-context>>]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.util.Date getSummaryDate()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.lang.String toHTML()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.util.FinancialUtils: java.math.BigDecimal computeGainPercent(java.math.BigDecimal,java.math.BigDecimal)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.math.BigDecimal getGainPercent()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.math.BigDecimal getGainPercent()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.lang.String toString()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.math.BigDecimal getTSIA()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.lang.String toString()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.math.BigDecimal getTSIA()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.math.BigDecimal getGainPercent()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.math.BigDecimal getOpenTSIA()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.lang.String toString()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.math.BigDecimal getOpenTSIA()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.math.BigDecimal getGainPercent()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: double getVolume()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.lang.String toString()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.util.Collection getTopGainers()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.lang.String toString()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.util.Collection getTopLosers()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.lang.String toString()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.util.Date getSummaryDate()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.lang.String toString()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.math.BigDecimal getOrderFee(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean createOrder(com.ibm.websphere.samples.daytrader.entities.AccountDataBean,com.ibm.websphere.samples.daytrader.entities.QuoteDataBean,com.ibm.websphere.samples.daytrader.entities.HoldingDataBean,java.lang.String,double)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: float rndFloat(int)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.math.BigDecimal getRandomPriceChangeFactor()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean completeOrder(java.lang.Integer,boolean)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean buy(java.lang.String,java.lang.String,double,int)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean completeOrder(java.lang.Integer,boolean)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean sell(java.lang.String,java.lang.Integer,int)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: java.util.concurrent.Future completeOrderAsync(java.lang.Integer,boolean)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean buy(java.lang.String,java.lang.String,double,int)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: java.util.concurrent.Future completeOrderAsync(java.lang.Integer,boolean)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean sell(java.lang.String,java.lang.Integer,int)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean updateQuotePriceVolume(java.lang.String,java.math.BigDecimal,double)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean completeOrder(java.lang.Integer,boolean)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean createOrder(com.ibm.websphere.samples.daytrader.entities.AccountDataBean,com.ibm.websphere.samples.daytrader.entities.QuoteDataBean,com.ibm.websphere.samples.daytrader.entities.HoldingDataBean,java.lang.String,double)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean buy(java.lang.String,java.lang.String,double,int)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean createOrder(com.ibm.websphere.samples.daytrader.entities.AccountDataBean,com.ibm.websphere.samples.daytrader.entities.QuoteDataBean,com.ibm.websphere.samples.daytrader.entities.HoldingDataBean,java.lang.String,double)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean sell(java.lang.String,java.lang.Integer,int)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.HoldingDataBean createHolding(com.ibm.websphere.samples.daytrader.entities.AccountDataBean,com.ibm.websphere.samples.daytrader.entities.QuoteDataBean,double,java.math.BigDecimal)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean completeOrder(java.lang.Integer,boolean)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: double random()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: float rndFloat(int)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: double random()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.math.BigDecimal getRandomPriceChangeFactor()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.math.BigDecimal getRandomPriceChangeFactor()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean completeOrder(java.lang.Integer,boolean)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: boolean getUpdateQuotePrices()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean updateQuotePriceVolume(java.lang.String,java.math.BigDecimal,double)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: boolean getLongRun()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: java.util.Collection getClosedOrders(java.lang.String)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: boolean getPublishQuotePriceChange()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean updateQuotePriceVolume(java.lang.String,java.math.BigDecimal,double)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: boolean getPublishQuotePriceChange()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: void publishQuotePriceChange(com.ibm.websphere.samples.daytrader.entities.QuoteDataBean,java.math.BigDecimal,java.math.BigDecimal,double)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.Integer getOrderID()>	[com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject, <com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean createOrder(com.ibm.websphere.samples.daytrader.entities.AccountDataBean,com.ibm.websphere.samples.daytrader.entities.QuoteDataBean,com.ibm.websphere.samples.daytrader.entities.HoldingDataBean,java.lang.String,double)>/new com.ibm.websphere.samples.daytrader.entities.OrderDataBean/0]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean buy(java.lang.String,java.lang.String,double,int)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.Integer getOrderID()>	[com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject, <com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean createOrder(com.ibm.websphere.samples.daytrader.entities.AccountDataBean,com.ibm.websphere.samples.daytrader.entities.QuoteDataBean,com.ibm.websphere.samples.daytrader.entities.HoldingDataBean,java.lang.String,double)>/new com.ibm.websphere.samples.daytrader.entities.OrderDataBean/0]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean sell(java.lang.String,java.lang.Integer,int)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.math.BigDecimal getOrderFee()>	[com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject, <com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean createOrder(com.ibm.websphere.samples.daytrader.entities.AccountDataBean,com.ibm.websphere.samples.daytrader.entities.QuoteDataBean,com.ibm.websphere.samples.daytrader.entities.HoldingDataBean,java.lang.String,double)>/new com.ibm.websphere.samples.daytrader.entities.OrderDataBean/0]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean buy(java.lang.String,java.lang.String,double,int)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.math.BigDecimal getOrderFee()>	[com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject, <com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean createOrder(com.ibm.websphere.samples.daytrader.entities.AccountDataBean,com.ibm.websphere.samples.daytrader.entities.QuoteDataBean,com.ibm.websphere.samples.daytrader.entities.HoldingDataBean,java.lang.String,double)>/new com.ibm.websphere.samples.daytrader.entities.OrderDataBean/0]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean sell(java.lang.String,java.lang.Integer,int)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String getUserID()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean updateAccountProfile(com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String getPassword()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean updateAccountProfile(com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String getFullName()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean updateAccountProfile(com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String getAddress()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean updateAccountProfile(com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String getEmail()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean updateAccountProfile(com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String getCreditCard()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean updateAccountProfile(com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.math.BigDecimal getPrice()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.QuoteDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean createOrder(com.ibm.websphere.samples.daytrader.entities.AccountDataBean,com.ibm.websphere.samples.daytrader.entities.QuoteDataBean,com.ibm.websphere.samples.daytrader.entities.HoldingDataBean,java.lang.String,double)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: java.lang.Integer getAccountID()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: java.lang.String toString()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: int getLoginCount()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: java.lang.String toString()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: int getLogoutCount()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: java.lang.String toString()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: java.util.Date getLastLogin()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: java.lang.String toString()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: java.util.Date getCreationDate()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: java.lang.String toString()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: java.math.BigDecimal getBalance()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: java.lang.String toString()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: java.math.BigDecimal getOpenBalance()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: java.lang.String toString()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: java.lang.String getProfileID()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountDataBean: java.lang.String toString()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean buy(java.lang.String,java.lang.String,double,int)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean buy(java.lang.String,java.lang.String,double,int)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean sell(java.lang.String,java.lang.Integer,int)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean sell(java.lang.String,java.lang.Integer,int)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean completeOrder(java.lang.Integer,boolean)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean completeOrder(java.lang.Integer,boolean)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: java.util.Collection getOrders(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: java.util.Collection getOrders(java.lang.String)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: java.util.Collection getClosedOrders(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: java.util.Collection getClosedOrders(java.lang.String)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean createQuote(java.lang.String,java.lang.String,java.math.BigDecimal)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean createQuote(java.lang.String,java.lang.String,java.math.BigDecimal)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean getQuote(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean getQuote(java.lang.String)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean updateQuotePriceVolume(java.lang.String,java.math.BigDecimal,double)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean updateQuotePriceVolume(java.lang.String,java.math.BigDecimal,double)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: java.util.Collection getHoldings(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: java.util.Collection getHoldings(java.lang.String)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.HoldingDataBean getHolding(java.lang.Integer)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.HoldingDataBean getHolding(java.lang.Integer)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountDataBean getAccountData(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountDataBean getAccountData(java.lang.String)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean getAccountProfileData(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean getAccountProfileData(java.lang.String)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean updateAccountProfile(com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean updateAccountProfile(com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountDataBean login(java.lang.String,java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountDataBean login(java.lang.String,java.lang.String)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountDataBean register(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.math.BigDecimal)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountDataBean register(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.math.BigDecimal)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean createOrder(com.ibm.websphere.samples.daytrader.entities.AccountDataBean,com.ibm.websphere.samples.daytrader.entities.QuoteDataBean,com.ibm.websphere.samples.daytrader.entities.HoldingDataBean,java.lang.String,double)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean createOrder(com.ibm.websphere.samples.daytrader.entities.AccountDataBean,com.ibm.websphere.samples.daytrader.entities.QuoteDataBean,com.ibm.websphere.samples.daytrader.entities.HoldingDataBean,java.lang.String,double)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean createOrder(com.ibm.websphere.samples.daytrader.entities.AccountDataBean,com.ibm.websphere.samples.daytrader.entities.QuoteDataBean,com.ibm.websphere.samples.daytrader.entities.HoldingDataBean,java.lang.String,double)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean createOrder(com.ibm.websphere.samples.daytrader.entities.AccountDataBean,com.ibm.websphere.samples.daytrader.entities.QuoteDataBean,com.ibm.websphere.samples.daytrader.entities.HoldingDataBean,java.lang.String,double)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean buy(java.lang.String,java.lang.String,double,int)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean buy(java.lang.String,java.lang.String,double,int)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean sell(java.lang.String,java.lang.Integer,int)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean sell(java.lang.String,java.lang.Integer,int)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean completeOrder(java.lang.Integer,boolean)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean completeOrder(java.lang.Integer,boolean)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: java.util.concurrent.Future completeOrderAsync(java.lang.Integer,boolean)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean buy(java.lang.String,java.lang.String,double,int)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: java.util.concurrent.Future completeOrderAsync(java.lang.Integer,boolean)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean sell(java.lang.String,java.lang.Integer,int)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: java.util.Collection getOrders(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: java.util.Collection getOrders(java.lang.String)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: java.util.Collection getClosedOrders(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: java.util.Collection getClosedOrders(java.lang.String)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean createQuote(java.lang.String,java.lang.String,java.math.BigDecimal)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean createQuote(java.lang.String,java.lang.String,java.math.BigDecimal)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean getQuote(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean getQuote(java.lang.String)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean updateQuotePriceVolume(java.lang.String,java.math.BigDecimal,double)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean updateQuotePriceVolume(java.lang.String,java.math.BigDecimal,double)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: java.util.Collection getHoldings(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: java.util.Collection getHoldings(java.lang.String)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.HoldingDataBean getHolding(java.lang.Integer)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.HoldingDataBean getHolding(java.lang.Integer)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountDataBean getAccountData(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountDataBean getAccountData(java.lang.String)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean getAccountProfileData(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean getAccountProfileData(java.lang.String)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean updateAccountProfile(com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean updateAccountProfile(com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountDataBean login(java.lang.String,java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountDataBean login(java.lang.String,java.lang.String)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountDataBean register(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.math.BigDecimal)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountDataBean register(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.math.BigDecimal)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean getMarketSummary()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean getMarketSummary()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: java.util.Collection getAllQuotes()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: java.util.Collection getAllQuotes()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean getMarketSummary()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean getMarketSummary()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.Integer getOrderID()>	[com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject, <com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean createOrder(com.ibm.websphere.samples.daytrader.entities.AccountDataBean,com.ibm.websphere.samples.daytrader.entities.QuoteDataBean,com.ibm.websphere.samples.daytrader.entities.HoldingDataBean,java.lang.String,double)>/new com.ibm.websphere.samples.daytrader.entities.OrderDataBean/0]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean buy(java.lang.String,java.lang.String,double,int)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.Integer getOrderID()>	[com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject, <com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean createOrder(com.ibm.websphere.samples.daytrader.entities.AccountDataBean,com.ibm.websphere.samples.daytrader.entities.QuoteDataBean,com.ibm.websphere.samples.daytrader.entities.HoldingDataBean,java.lang.String,double)>/new com.ibm.websphere.samples.daytrader.entities.OrderDataBean/0]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean sell(java.lang.String,java.lang.Integer,int)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.Integer getOrderID()>	[com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject, <com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean sell(java.lang.String,java.lang.Integer,int)>/new com.ibm.websphere.samples.daytrader.entities.OrderDataBean/0]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.OrderDataBean sell(java.lang.String,java.lang.Integer,int)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: java.util.Collection getAllQuotes()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: java.util.Collection getAllQuotes()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.OrderDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.Integer getOrderID()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.OrderDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.String toString()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.OrderDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.String getOrderType()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.OrderDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.String toString()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.OrderDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.String getOrderStatus()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.OrderDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.String toString()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.OrderDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.util.Date getOpenDate()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.OrderDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.String toString()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.OrderDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.util.Date getCompletionDate()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.OrderDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.String toString()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.OrderDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: double getQuantity()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.OrderDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.String toString()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.OrderDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.math.BigDecimal getPrice()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.OrderDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.String toString()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.OrderDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.math.BigDecimal getOrderFee()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.OrderDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.String toString()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.OrderDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.String getSymbol()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.OrderDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.String toString()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.OrderDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.lang.String getSymbol()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.QuoteDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.OrderDataBean: java.lang.String getSymbol()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2Entity::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int rndInt(int)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2Entity::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndSymbol()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2Entity::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean getQuote(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2Entity: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2Entity::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean getQuote(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2Entity: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2Entity::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: double random()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2Entity::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int rndInt(int)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2Entity::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndSymbol()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2Entity::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2Entity: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2Entity::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getPrimIterations()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2Entity::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2Entity: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.PingJDBCRead::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int rndInt(int)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.PingJDBCRead::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndSymbol()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.PingJDBCRead::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean getQuote(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.PingJDBCRead: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.PingJDBCRead::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean getQuote(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.PingJDBCRead: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.PingJDBCRead::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: double random()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.PingJDBCRead::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int rndInt(int)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.PingJDBCRead::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndSymbol()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.PingJDBCRead::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.PingJDBCRead: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.PingJDBCRead::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getPrimIterations()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.PingJDBCRead::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.PingJDBCRead: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.PingServlet2DB::MockObject]	<com.ibm.websphere.samples.daytrader.impl.direct.TradeDirect: java.sql.Connection getConnPublic()>	[com.ibm.websphere.samples.daytrader.web.prims.PingServlet2DB::MockObject, <com.ibm.websphere.samples.daytrader.web.prims.PingServlet2DB: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>/new com.ibm.websphere.samples.daytrader.impl.direct.TradeDirect/0]	<com.ibm.websphere.samples.daytrader.web.prims.PingServlet2DB: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: double investmentReturn(double,double)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getPrimIterations()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String getUserID()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String toString()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String getPassword()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String toString()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String getFullName()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String toString()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String getAddress()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String toString()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String getEmail()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String toString()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String getCreditCard()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean: java.lang.String toString()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.jsf.QuoteJSF::MockObject]	<com.ibm.websphere.samples.daytrader.web.jsf.QuoteJSF: java.lang.String getSymbols()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.jsf.QuoteJSF::MockObject]	<com.ibm.websphere.samples.daytrader.web.jsf.QuoteJSF: java.lang.String getQuotesBySymbols()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeServletAction::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String getPage(int)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeServletAction::MockObject]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeServletAction: void doAccount(javax.servlet.ServletContext,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.String)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeServletAction::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String getPage(int)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeServletAction::MockObject]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeServletAction: void doBuy(javax.servlet.ServletContext,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.String,java.lang.String)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeServletAction::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String getPage(int)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeServletAction::MockObject]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeServletAction: void doHome(javax.servlet.ServletContext,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.String)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeServletAction::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String getPage(int)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeServletAction::MockObject]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeServletAction: void doLogin(javax.servlet.ServletContext,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.String)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeServletAction::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String getPage(int)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeServletAction::MockObject]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeServletAction: void doLogout(javax.servlet.ServletContext,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeServletAction::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String getPage(int)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeServletAction::MockObject]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeServletAction: void doPortfolio(javax.servlet.ServletContext,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.String)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeServletAction::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String getPage(int)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeServletAction::MockObject]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeServletAction: void doQuotes(javax.servlet.ServletContext,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.String)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeServletAction::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String getPage(int)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeServletAction::MockObject]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeServletAction: void doRegister(javax.servlet.ServletContext,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeServletAction::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String getPage(int)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeServletAction::MockObject]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeServletAction: void doSell(javax.servlet.ServletContext,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.Integer)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeServletAction::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String getPage(int)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeServletAction::MockObject]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeServletAction: void doWelcome(javax.servlet.ServletContext,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeServletAction::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String getPage(int)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeServletAction::MockObject]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeServletAction: void doMarketSummary(javax.servlet.ServletContext,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeServletAction::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: boolean getLongRun()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeServletAction::MockObject]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeServletAction: void doAccount(javax.servlet.ServletContext,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.String)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeServletAction::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getOrderProcessingMode()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeServletAction::MockObject]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeServletAction: void doBuy(javax.servlet.ServletContext,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.String,java.lang.String)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeServletAction::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getOrderProcessingMode()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeServletAction::MockObject]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeServletAction: void doSell(javax.servlet.ServletContext,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.Integer)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.jsf.AccountDataJSF::MockObject]	<com.ibm.websphere.samples.daytrader.util.FinancialUtils: java.math.BigDecimal computeGain(java.math.BigDecimal,java.math.BigDecimal)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.jsf.AccountDataJSF::MockObject]	<com.ibm.websphere.samples.daytrader.web.jsf.AccountDataJSF: void doAccountData(com.ibm.websphere.samples.daytrader.entities.AccountDataBean,java.util.Collection)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.jsf.AccountDataJSF::MockObject]	<com.ibm.websphere.samples.daytrader.util.FinancialUtils: java.math.BigDecimal computeGainPercent(java.math.BigDecimal,java.math.BigDecimal)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.jsf.AccountDataJSF::MockObject]	<com.ibm.websphere.samples.daytrader.web.jsf.AccountDataJSF: void doAccountData(com.ibm.websphere.samples.daytrader.entities.AccountDataBean,java.util.Collection)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.jsf.AccountDataJSF::MockObject]	<com.ibm.websphere.samples.daytrader.util.FinancialUtils: java.math.BigDecimal computeHoldingsTotal(java.util.Collection)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.jsf.AccountDataJSF::MockObject]	<com.ibm.websphere.samples.daytrader.web.jsf.AccountDataJSF: void doAccountData(com.ibm.websphere.samples.daytrader.entities.AccountDataBean,java.util.Collection)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.beanval.PingServletBeanValCDI::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.beanval.CDIMethodConstraintBean: int getHitCount(java.time.LocalDateTime)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.beanval.CDIMethodConstraintBean::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.beanval.PingServletBeanValCDI: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.beanval.PingServletBeanValCDI::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.beanval.CDIMethodConstraintBean: java.util.List hitList()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.beanval.CDIMethodConstraintBean::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.beanval.PingServletBeanValCDI: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2CMROne2Many::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: java.util.Collection getOrders(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2CMROne2Many: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2CMROne2Many::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: java.util.Collection getOrders(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2CMROne2Many: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2CMROne2Many::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndUserID()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2CMROne2Many::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2CMROne2Many: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2CMROne2Many::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String getNextUserIDFromDeck()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2CMROne2Many::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndUserID()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2CMROne2Many::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getMAX_USERS()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2CMROne2Many::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String getNextUserIDFromDeck()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2CMROne2Many::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getPrimIterations()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2CMROne2Many::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2CMROne2Many: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2CMROne2One::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean getAccountProfileData(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2CMROne2One: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2CMROne2One::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean getAccountProfileData(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2CMROne2One: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2CMROne2One::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndUserID()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2CMROne2One::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2CMROne2One: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2CMROne2One::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String getNextUserIDFromDeck()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2CMROne2One::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndUserID()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2CMROne2One::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getMAX_USERS()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2CMROne2One::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String getNextUserIDFromDeck()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2CMROne2One::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getPrimIterations()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2CMROne2One::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2CMROne2One: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.HoldingDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.HoldingDataBean: java.lang.Integer getHoldingID()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.HoldingDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.HoldingDataBean: java.lang.String toString()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.HoldingDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.HoldingDataBean: double getQuantity()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.HoldingDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.HoldingDataBean: java.lang.String toString()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.HoldingDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.HoldingDataBean: java.math.BigDecimal getPurchasePrice()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.HoldingDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.HoldingDataBean: java.lang.String toString()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.HoldingDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.HoldingDataBean: java.util.Date getPurchaseDate()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.HoldingDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.HoldingDataBean: java.lang.String toString()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.HoldingDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.HoldingDataBean: java.lang.String getQuoteID()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.HoldingDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.HoldingDataBean: java.lang.String toString()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.HoldingDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.lang.String getSymbol()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.QuoteDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.HoldingDataBean: java.lang.String getQuoteID()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeAppServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getWebInterface()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeAppServlet::MockObject]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeAppServlet: void performTask(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2TwoPhase::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int rndInt(int)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2TwoPhase::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndSymbol()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2TwoPhase::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean pingTwoPhase(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2TwoPhase: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2TwoPhase::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: double random()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2TwoPhase::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int rndInt(int)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2TwoPhase::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndSymbol()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2TwoPhase::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2TwoPhase: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2TwoPhase::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getPrimIterations()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2TwoPhase::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2TwoPhase: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.PingJDBCWrite::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int rndInt(int)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.PingJDBCWrite::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndSymbol()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.PingJDBCWrite::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: float rndFloat(int)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.PingJDBCWrite::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.math.BigDecimal getRandomPriceChangeFactor()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.PingJDBCWrite::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: double random()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.PingJDBCWrite::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int rndInt(int)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.PingJDBCWrite::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: double random()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.PingJDBCWrite::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: float rndFloat(int)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.PingJDBCWrite::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: double random()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.PingJDBCWrite::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.math.BigDecimal getRandomPriceChangeFactor()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.PingJDBCWrite::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.math.BigDecimal getRandomPriceChangeFactor()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.PingJDBCWrite::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.PingJDBCWrite: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.PingJDBCWrite::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndSymbol()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.PingJDBCWrite::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.PingJDBCWrite: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.PingJDBCWrite::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getPrimIterations()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.PingJDBCWrite::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.PingJDBCWrite: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2EntityCollection::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: java.util.Collection getHoldings(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2EntityCollection: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2EntityCollection::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: java.util.Collection getHoldings(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2EntityCollection: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2EntityCollection::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndUserID()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2EntityCollection::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2EntityCollection: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2EntityCollection::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String getNextUserIDFromDeck()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2EntityCollection::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndUserID()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2EntityCollection::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getMAX_USERS()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2EntityCollection::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String getNextUserIDFromDeck()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2EntityCollection::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getPrimIterations()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2EntityCollection::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2EntityCollection: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.PingJDBCRead2JSP::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int rndInt(int)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.PingJDBCRead2JSP::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndSymbol()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.PingJDBCRead2JSP::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean getQuote(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.PingJDBCRead2JSP: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.PingJDBCRead2JSP::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean getQuote(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.PingJDBCRead2JSP: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.PingJDBCRead2JSP::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: double random()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.PingJDBCRead2JSP::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int rndInt(int)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.PingJDBCRead2JSP::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndSymbol()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.PingJDBCRead2JSP::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.PingJDBCRead2JSP: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.PingJDBCRead2JSP::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getPrimIterations()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.PingJDBCRead2JSP::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.PingJDBCRead2JSP: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.QuoteDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.lang.String getSymbol()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.QuoteDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.lang.String toString()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.QuoteDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.lang.String getCompanyName()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.QuoteDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.lang.String toString()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.QuoteDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.math.BigDecimal getPrice()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.QuoteDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.lang.String toString()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.QuoteDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.math.BigDecimal getOpen()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.QuoteDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.lang.String toString()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.QuoteDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.math.BigDecimal getLow()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.QuoteDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.lang.String toString()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.QuoteDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.math.BigDecimal getHigh()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.QuoteDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.lang.String toString()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.QuoteDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: double getChange()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.QuoteDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.lang.String toString()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.QuoteDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: double getVolume()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.entities.QuoteDataBean::MockObject]	<com.ibm.websphere.samples.daytrader.entities.QuoteDataBean: java.lang.String toString()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.websocket.JsonEncoder::MockObject]	<com.ibm.websphere.samples.daytrader.web.websocket.JsonMessage: java.lang.String getKey()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.websocket.JsonMessage::MockObject]	<com.ibm.websphere.samples.daytrader.web.websocket.JsonEncoder: java.lang.String encode(com.ibm.websphere.samples.daytrader.web.websocket.JsonMessage)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.websocket.JsonEncoder::MockObject]	<com.ibm.websphere.samples.daytrader.web.websocket.JsonMessage: java.lang.String getValue()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.websocket.JsonMessage::MockObject]	<com.ibm.websphere.samples.daytrader.web.websocket.JsonEncoder: java.lang.String encode(com.ibm.websphere.samples.daytrader.web.websocket.JsonMessage)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2MDBQueue::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getPrimIterations()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2MDBQueue::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2MDBQueue: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2MDBTopic::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getPrimIterations()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2MDBTopic::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2MDBTopic: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: char getScenarioAction(boolean)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet: void performTask(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndEmail(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet: void performTask(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int rndInt(int)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: char getScenarioAction(boolean)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int rndInt(int)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndEmail(java.lang.String)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int rndInt(int)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndAddress()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int rndInt(int)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndCreditCard()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int rndInt(int)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndFullName()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int rndInt(int)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: float rndQuantity()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int rndInt(int)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndSymbol()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int rndInt(int)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndSymbols()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String getHostname()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndNewUserID()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String getUserID()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet: void performTask(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String nextUserID()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String getUserID()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: double random()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int rndInt(int)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndAddress()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet: void performTask(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndBalance()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet: void performTask(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndCreditCard()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet: void performTask(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndFullName()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet: void performTask(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndNewUserID()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet: void performTask(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: float rndQuantity()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet: void performTask(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndSymbol()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet: void performTask(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndSymbols()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet: void performTask(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndUserID()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String getUserID()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String getNextUserIDFromDeck()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndUserID()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getMAX_USERS()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeScenarioServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String getNextUserIDFromDeck()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String getPage(int)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet::MockObject]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet: void doConfigDisplay(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String getPage(int)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet::MockObject]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet: void doResetTrade(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String[] getRunTimeModeNames()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet::MockObject]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet: void doConfigUpdate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String[] getOrderProcessingModeNames()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet::MockObject]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet: void doConfigUpdate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String[] getWebInterfaceNames()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet::MockObject]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet: void doConfigUpdate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getMAX_USERS()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet::MockObject]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet: void doConfigUpdate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getMAX_QUOTES()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet::MockObject]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet: void doConfigUpdate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getPrimIterations()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet::MockObject]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet: void doConfigUpdate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: boolean getLongRun()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet::MockObject]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet: void doConfigUpdate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: boolean getPublishQuotePriceChange()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet::MockObject]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet: void doConfigUpdate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getMarketSummaryInterval()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet::MockObject]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet: void doConfigUpdate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getRunTimeMode()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet::MockObject]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet: void doConfigUpdate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getOrderProcessingMode()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet::MockObject]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet: void doConfigUpdate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getWebInterface()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet::MockObject]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet: void doConfigUpdate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: boolean getDisplayOrderAlerts()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet::MockObject]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet: void doConfigUpdate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getListQuotePriceChangeFrequency()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet::MockObject]	<com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet: void doConfigUpdate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2Entity2JSP::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int rndInt(int)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2Entity2JSP::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndSymbol()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2Entity2JSP::MockObject]	<com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean getQuote(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2Entity2JSP: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2Entity2JSP::MockObject]	<com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean: com.ibm.websphere.samples.daytrader.entities.QuoteDataBean getQuote(java.lang.String)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.impl.session2direct.DirectSLSBBean::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2Entity2JSP: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2Entity2JSP::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: double random()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2Entity2JSP::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int rndInt(int)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2Entity2JSP::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndSymbol()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2Entity2JSP::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2Entity2JSP: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2Entity2JSP::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getPrimIterations()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2Entity2JSP::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Session2Entity2JSP: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Entity::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int rndInt(int)>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Entity::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndSymbol()>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Entity::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: double random()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Entity::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int rndInt(int)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Entity::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: java.lang.String rndSymbol()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Entity::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Entity: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Entity::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getPrimIterations()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Entity::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2Entity: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.PingServlet2Include::MockObject]	<com.ibm.websphere.samples.daytrader.util.TradeConfig: int getPrimIterations()>	[<<immutable-hcontext>>, com.ibm.websphere.samples.daytrader.web.prims.PingServlet2Include::MockObject]	<com.ibm.websphere.samples.daytrader.web.prims.PingServlet2Include: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
[<<immutable-context>>, <com.ibm.websphere.samples.daytrader.web.prims.beanval.PingServletBeanValSimple2: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>/new com.ibm.websphere.samples.daytrader.web.prims.beanval.SimpleBean2/0]	<com.ibm.websphere.samples.daytrader.web.prims.beanval.SimpleBean1: java.lang.String formatConstraintViolations(java.util.Set)>	[<<immutable-context>>, <com.ibm.websphere.samples.daytrader.web.prims.beanval.PingServletBeanValSimple2: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>/new com.ibm.websphere.samples.daytrader.web.prims.beanval.SimpleBean2/0]	<com.ibm.websphere.samples.daytrader.web.prims.beanval.SimpleBean1: void checkInjectionValidation()>
[<<immutable-context>>, <com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean getRandomInstance()>/new com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean/0]	<com.ibm.websphere.samples.daytrader.util.FinancialUtils: java.math.BigDecimal computeGainPercent(java.math.BigDecimal,java.math.BigDecimal)>	[<<immutable-context>>, <com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean getRandomInstance()>/new com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean/0]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: void <init>(java.math.BigDecimal,java.math.BigDecimal,double,java.util.Collection,java.util.Collection)>
[<<immutable-context>>, <com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean getRandomInstance()>/new com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean/0]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.math.BigDecimal getTSIA()>	[<<immutable-context>>, <com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean getRandomInstance()>/new com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean/0]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: void <init>(java.math.BigDecimal,java.math.BigDecimal,double,java.util.Collection,java.util.Collection)>
[<<immutable-context>>, <com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean getRandomInstance()>/new com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean/0]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: java.math.BigDecimal getOpenTSIA()>	[<<immutable-context>>, <com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean getRandomInstance()>/new com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean/0]	<com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean: void <init>(java.math.BigDecimal,java.math.BigDecimal,double,java.util.Collection,java.util.Collection)>
[<<immutable-context>>, <com.ibm.websphere.samples.daytrader.web.prims.beanval.PingServletBeanValSimple1: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>/new com.ibm.websphere.samples.daytrader.web.prims.beanval.SimpleBean1/0]	<com.ibm.websphere.samples.daytrader.web.prims.beanval.SimpleBean1: java.lang.String formatConstraintViolations(java.util.Set)>	[<<immutable-context>>, <com.ibm.websphere.samples.daytrader.web.prims.beanval.PingServletBeanValSimple1: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>/new com.ibm.websphere.samples.daytrader.web.prims.beanval.SimpleBean1/0]	<com.ibm.websphere.samples.daytrader.web.prims.beanval.SimpleBean1: void checkInjectionValidation()>
[<<immutable-context>>, <com.ibm.websphere.samples.daytrader.web.prims.PingServlet2DB: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>/new com.ibm.websphere.samples.daytrader.impl.direct.TradeDirect/0]	<com.ibm.websphere.samples.daytrader.impl.direct.TradeDirect: java.sql.Connection getConn()>	[<<immutable-context>>, <com.ibm.websphere.samples.daytrader.web.prims.PingServlet2DB: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>/new com.ibm.websphere.samples.daytrader.impl.direct.TradeDirect/0]	<com.ibm.websphere.samples.daytrader.impl.direct.TradeDirect: java.sql.Connection getConnPublic()>
[<<immutable-context>>, <com.ibm.websphere.samples.daytrader.web.prims.PingServlet2DB: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>/new com.ibm.websphere.samples.daytrader.impl.direct.TradeDirect/0]	<com.ibm.websphere.samples.daytrader.util.Log: boolean doTrace()>	[<<immutable-context>>, <com.ibm.websphere.samples.daytrader.web.prims.PingServlet2DB: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>/new com.ibm.websphere.samples.daytrader.impl.direct.TradeDirect/0]	<com.ibm.websphere.samples.daytrader.impl.direct.TradeDirect: java.sql.Connection getConn()>
[com.ibm.websphere.samples.daytrader.web.jsf.QuoteJSF::MockObject, <com.ibm.websphere.samples.daytrader.web.jsf.QuoteJSF: java.lang.String getQuotesBySymbols()>/new com.ibm.websphere.samples.daytrader.web.jsf.QuoteData/0]	<com.ibm.websphere.samples.daytrader.util.FinancialUtils: java.math.BigDecimal computeGain(java.math.BigDecimal,java.math.BigDecimal)>	[com.ibm.websphere.samples.daytrader.web.jsf.QuoteJSF::MockObject, <com.ibm.websphere.samples.daytrader.web.jsf.QuoteJSF: java.lang.String getQuotesBySymbols()>/new com.ibm.websphere.samples.daytrader.web.jsf.QuoteData/0]	<com.ibm.websphere.samples.daytrader.web.jsf.QuoteData: void <init>(java.math.BigDecimal,java.math.BigDecimal,java.lang.String,java.math.BigDecimal,java.math.BigDecimal,java.lang.String,java.lang.Double,java.lang.Double)>
[com.ibm.websphere.samples.daytrader.web.jsf.QuoteJSF::MockObject, <com.ibm.websphere.samples.daytrader.web.jsf.QuoteJSF: java.lang.String getQuotesBySymbols()>/new com.ibm.websphere.samples.daytrader.web.jsf.QuoteData/0]	<com.ibm.websphere.samples.daytrader.util.FinancialUtils: java.math.BigDecimal computeGainPercent(java.math.BigDecimal,java.math.BigDecimal)>	[com.ibm.websphere.samples.daytrader.web.jsf.QuoteJSF::MockObject, <com.ibm.websphere.samples.daytrader.web.jsf.QuoteJSF: java.lang.String getQuotesBySymbols()>/new com.ibm.websphere.samples.daytrader.web.jsf.QuoteData/0]	<com.ibm.websphere.samples.daytrader.web.jsf.QuoteData: void <init>(java.math.BigDecimal,java.math.BigDecimal,java.lang.String,java.math.BigDecimal,java.math.BigDecimal,java.lang.String,java.lang.Double,java.lang.Double)>
[com.ibm.websphere.samples.daytrader.web.prims.beanval.PingServletBeanValSimple1::MockObject, <com.ibm.websphere.samples.daytrader.web.prims.beanval.PingServletBeanValSimple1: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>/new com.ibm.websphere.samples.daytrader.web.prims.beanval.SimpleBean1/0]	<com.ibm.websphere.samples.daytrader.web.prims.beanval.SimpleBean1: java.lang.String formatConstraintViolations(java.util.Set)>	[com.ibm.websphere.samples.daytrader.web.prims.beanval.PingServletBeanValSimple1::MockObject, <com.ibm.websphere.samples.daytrader.web.prims.beanval.PingServletBeanValSimple1: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>/new com.ibm.websphere.samples.daytrader.web.prims.beanval.SimpleBean1/0]	<com.ibm.websphere.samples.daytrader.web.prims.beanval.SimpleBean1: void checkInjectionValidation()>
[com.ibm.websphere.samples.daytrader.web.prims.PingServlet2DB::MockObject, <com.ibm.websphere.samples.daytrader.web.prims.PingServlet2DB: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>/new com.ibm.websphere.samples.daytrader.impl.direct.TradeDirect/0]	<com.ibm.websphere.samples.daytrader.impl.direct.TradeDirect: java.sql.Connection getConn()>	[com.ibm.websphere.samples.daytrader.web.prims.PingServlet2DB::MockObject, <com.ibm.websphere.samples.daytrader.web.prims.PingServlet2DB: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>/new com.ibm.websphere.samples.daytrader.impl.direct.TradeDirect/0]	<com.ibm.websphere.samples.daytrader.impl.direct.TradeDirect: java.sql.Connection getConnPublic()>
[com.ibm.websphere.samples.daytrader.web.prims.PingServlet2DB::MockObject, <com.ibm.websphere.samples.daytrader.web.prims.PingServlet2DB: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>/new com.ibm.websphere.samples.daytrader.impl.direct.TradeDirect/0]	<com.ibm.websphere.samples.daytrader.util.Log: boolean doTrace()>	[com.ibm.websphere.samples.daytrader.web.prims.PingServlet2DB::MockObject, <com.ibm.websphere.samples.daytrader.web.prims.PingServlet2DB: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>/new com.ibm.websphere.samples.daytrader.impl.direct.TradeDirect/0]	<com.ibm.websphere.samples.daytrader.impl.direct.TradeDirect: java.sql.Connection getConn()>
[com.ibm.websphere.samples.daytrader.web.prims.beanval.PingServletBeanValSimple2::MockObject, <com.ibm.websphere.samples.daytrader.web.prims.beanval.PingServletBeanValSimple2: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>/new com.ibm.websphere.samples.daytrader.web.prims.beanval.SimpleBean2/0]	<com.ibm.websphere.samples.daytrader.web.prims.beanval.SimpleBean1: java.lang.String formatConstraintViolations(java.util.Set)>	[com.ibm.websphere.samples.daytrader.web.prims.beanval.PingServletBeanValSimple2::MockObject, <com.ibm.websphere.samples.daytrader.web.prims.beanval.PingServletBeanValSimple2: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>/new com.ibm.websphere.samples.daytrader.web.prims.beanval.SimpleBean2/0]	<com.ibm.websphere.samples.daytrader.web.prims.beanval.SimpleBean1: void checkInjectionValidation()>
